{"version":3,"sources":["containers/beep.mp3","components/BPMStatus.js","components/BPMRange.js","components/PlayButton.js","components/Icon.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","BPMStatus","range","className","BPMRange","rangeChange","type","max","min","step","onInput","PlayButton","onPlay","children","onClick","Icon","iconState","icon","App","props","onChangeRange","event","interval","parseInt","target","value","state","isPlay","audio","pause","clearInterval","timer","setInterval","playAudio","setState","play","Audio","beep","prevs","prevState","this","href","Component","Boolean","window","location","hostname","match","library","add","fab","faPause","faPlay","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,0KCY5BC,EAVG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjB,OACI,wBAAIC,UAAU,WACTD,EADL,OAGI,0BAAMC,UAAU,SAAhB,SCCGC,EANE,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAChB,OACI,2BAAOC,KAAK,QAAQH,UAAU,SAASI,IAAI,MAAMC,IAAI,KAAKC,KAAK,IAAIC,QAASL,KCMrEM,EARI,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC1B,OACI,4BAAQP,KAAK,SAASH,UAAU,6CAA6CW,QAASF,GACjFC,I,OCOEE,EATF,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACZ,OACI,kBAAC,IAAD,CACIC,KAAMD,EAAY,QAAU,OAC5Bb,UAAU,c,iBC2EPe,E,kDAxEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqBRC,cAAgB,SAAAC,GACd,EAAKC,SAAY,GAAKC,SAASF,EAAMG,OAAOC,OAAU,IAClD,EAAKC,MAAMC,SACb,EAAKC,MAAMC,QACXC,cAAc,EAAKC,OACnB,EAAKA,MAAQC,YAAY,EAAKC,UAAW,EAAKX,WAEhD,EAAKY,SAAS,CAAEhC,MAAOmB,EAAMG,OAAOC,SA7BnB,EAgCnBb,OAAS,WACH,EAAKc,MAAMC,QACb,EAAKC,MAAMC,QACXC,cAAc,EAAKC,QAEnB,EAAKA,MAAQC,YAAY,EAAKC,UAAW,EAAKX,UAEhD,EAAKY,SAAS,CAAEP,QAAS,EAAKD,MAAMC,UAvCnB,EA0CnBM,UAAY,WACV,EAAKL,MAAMO,QAzCX,EAAKT,MAAQ,CACXC,QAAQ,EACRzB,MAAO,MAET,EAAK6B,MAAQ,KACb,EAAKH,MAAQ,IAAIQ,MAAMC,KACvB,EAAKf,SAAY,GAAKC,SAAS,EAAKG,MAAMxB,OAAU,IARnC,E,iEAWW,IAAD,uBAAPoC,EAAO,yBAAPA,EAAO,oBAClBC,EAAaD,EADK,GAIvBC,EAAUZ,SAAWa,KAAKd,MAAMC,QAC9Ba,KAAKd,MAAMC,QACba,KAAKP,c,+BA8BT,OACE,yBAAK9B,UAAU,sCACb,yBAAKA,UAAU,mCACb,kBAAC,EAAD,CAAWD,MAAOsC,KAAKd,MAAMxB,QAC7B,kBAAC,EAAD,CAAYU,OAAQ4B,KAAK5B,QACvB,kBAAC,EAAD,CAAMI,UAAWwB,KAAKd,MAAMC,WAGhC,kBAAC,EAAD,CAAUtB,YAAamC,KAAKpB,gBAC5B,6BACE,uBAAGjB,UAAU,MAAb,iPAKF,4BAAQA,UAAU,UAChB,uBAAGsC,KAAK,kDAAkDtC,UAAU,QAClE,kBAAC,IAAD,CAAiBc,KAAM,CAAC,MAAO,UAAWd,UAAU,mB,GAlE9CuC,a,8BCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAAQC,IAAIC,IAAKC,IAASC,KAC1BC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2cd2ad52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.b76b0645.mp3\";","import React from \"react\";\r\n\r\nconst BPMStatus = ({ range }) => {\r\n    return (\r\n        <h1 className=\"f1 gray\">\r\n            {range}\r\n            &nbsp;\r\n            <span className=\"green\">bpm</span>\r\n        </h1>\r\n    );\r\n};\r\n\r\nexport default BPMStatus;","import React from \"react\";\r\n\r\nconst BPMRange = ({ rangeChange }) => {\r\n    return (\r\n        <input type=\"range\" className=\"slider\" max=\"218\" min=\"40\" step=\"1\" onInput={rangeChange}></input>\r\n    );\r\n}\r\n\r\nexport default BPMRange;","import React from \"react\";\r\n\r\nconst PlayButton = ({ onPlay, children }) => {\r\n    return (\r\n        <button type=\"button\" className=\"bg-green bn br-100 pa4 pointer dim ml-auto\" onClick={onPlay}>\r\n            {children}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default PlayButton;","import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Icon = ({ iconState }) => {\r\n    return (\r\n        <FontAwesomeIcon\r\n            icon={iconState ? \"pause\" : \"play\"}\r\n            className=\"white f3\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default Icon;","import React, { Component } from 'react';\nimport BPMStatus from '../components/BPMStatus';\nimport BPMRange from '../components/BPMRange';\nimport PlayButton from '../components/PlayButton';\nimport Icon from '../components/Icon';\nimport beep from './beep.mp3';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPlay: false,\n      range: \"50\"\n    }\n    this.timer = null;\n    this.audio = new Audio(beep);\n    this.interval = (60 / parseInt(this.state.range)) * 1000;\n  }\n\n  componentDidUpdate(...prevs) {\n    const [, prevState] = prevs;\n\n    // * prevent 1 beat late\n    if (prevState.isPlay !== this.state.isPlay) {\n      if (this.state.isPlay) {\n        this.playAudio();\n      }\n    }\n  }\n\n  onChangeRange = event => {\n    this.interval = (60 / parseInt(event.target.value)) * 1000;\n    if (this.state.isPlay) {\n      this.audio.pause();\n      clearInterval(this.timer);\n      this.timer = setInterval(this.playAudio, this.interval);\n    }\n    this.setState({ range: event.target.value });\n  }\n\n  onPlay = () => {\n    if (this.state.isPlay) {\n      this.audio.pause();\n      clearInterval(this.timer);\n    } else {\n      this.timer = setInterval(this.playAudio, this.interval);\n    }\n    this.setState({ isPlay: !this.state.isPlay });\n  }\n\n  playAudio = () => {\n    this.audio.play();\n  }\n\n  render() {\n    return (\n      <div className=\"container pa1 w-80 ml-auto mr-auto\">\n        <div className=\"flex flex-wrap items-center pa2\">\n          <BPMStatus range={this.state.range} />\n          <PlayButton onPlay={this.onPlay}>\n            <Icon iconState={this.state.isPlay} />\n          </PlayButton>\n        </div>\n        <BPMRange rangeChange={this.onChangeRange} />\n        <div>\n          <p className=\"tj\">A metronome, from ancient Greek (métron, \"measure\") and (némo, \"I manage\", \"I lead\"),\n          is a device that produces an audible click or other sound at a regular interval\n          that can be set by the user, typically in beats per minute (BPM)\n          </p>\n        </div>\n        <footer className=\"tc pa2\">\n          <a href=\"https://github.com/fabianvieri/simple-metronome\" className=\"link\">\n            <FontAwesomeIcon icon={[\"fab\", \"github\"]} className=\"f1 gray\" />\n          </a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons'\nimport * as serviceWorker from './serviceWorker';\n\nlibrary.add(fab, faPause, faPlay);\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}